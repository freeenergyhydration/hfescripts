#!/usr/bin/perl -w
use Statistics::Descriptive;

my $max_power=5;
if (defined($ARGV[0])) {
  $max_power=$ARGV[0];
}

for my $power (3..$max_power) {
my $n_steps=2**$power;

my $max_boot=100;
my $d_lambda = 0.002;

####################################################################
sub read_ener {
  my $name=$_[0];
  open(INP,$name) or die;
  my $line;
  my @ener;
#  system "cp $name en_test_org.dat";
#  open(OUT,">en_test.dat");
  do {
    $line=<INP>;
   } while (($line=~m/^#/) || ($line=~m/^\@/));
#    print $line;
#   my $nr=0;
  while(<INP>) {
    my ($t,@e_data)=split;
    my $e=0.0;
    foreach my $de (@e_data) {
	$e+=$de;	
    }
 #   print OUT "$t $e\n";
    push(@ener,$e);
#     $nr++;
#     last if ($nr>500);
  }
  close INP;
  #close OUT;
  return @ener;
}
####################################################################
####################################################################

my $lambda_step=1.0/$n_steps;

my @lambda;

my @ti;

for my $i (0..$n_steps) {
  my $f=$i*$lambda_step;
  $lambda[$i]=$i*$lambda_step;
}

my @all_dh;
my @n_rec;

for my $nr (0..$#lambda) {
  my @ep=&read_ener("run_$lambda[$nr]/energy_p.xvg");
  my @en=&read_ener("run_$lambda[$nr]/energy_n.xvg");
  if ($#en!=$#ep) {
    die "Number of records does not match in run_$lambda[$nr]\n";
  }
  push @n_rec,$#en;
  for my $i (0..$#en) {
    my $dh=($ep[$i]-$en[$i])/2.0/$d_lambda;
    push @{$all_dh[$nr]},$dh;
  }
}

for my $nr (0..$#lambda) {
  my $sum=0;
  for my $i (0..$n_rec[$nr]) {
    $sum+=$all_dh[$nr][$i];
  }
  $ti[$nr]=$sum/($n_rec[$nr]+1);
}

#	trapez
my $int_trapez=0.0;
$int_trapez=$ti[0];
$int_trapez+=$ti[$#lambda];
for my $nr (1..$#lambda-1) {
  $int_trapez+=2.0*$ti[$nr];
}
$int_trapez = $int_trapez*($lambda[$#lambda]-$lambda[0])/2.0/$#lambda;
my $stat_trapez = Statistics::Descriptive::Full->new();

#bootstraps

for my $boot (0..$max_boot) {
@ti=();
for my $nr (0..$#lambda) {
  my $sum=0;
  for my $i (0..$n_rec[$nr]) {
    $sum+=$all_dh[$nr][int(rand($n_rec[$nr]+1))];
  }
  $ti[$nr]=$sum/($n_rec[$nr]+1);
}
#trapez
$int=$ti[0]+$ti[$#lambda];
for my $nr (1..$#lambda-1) {
  $int+=2.0*$ti[$nr];
}
$int= $int*($lambda[$#lambda]-$lambda[0])/2.0/$#lambda;
$stat_trapez->add_data($int);
}

my $kc=4.184;
printf("%4d %7.2f ",$n_steps,$int_trapez/$kc);
$low=$int_trapez-$stat_trapez->percentile(5);
$hi=$stat_trapez->percentile(95)-$int_trapez;
printf("%5.2f %5.2f\n",$low/$kc,$hi/$kc);
}
